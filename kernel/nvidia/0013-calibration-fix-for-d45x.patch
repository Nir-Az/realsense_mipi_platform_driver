From 52730f2abc3d727fb9b31b361690d4f69a126f90 Mon Sep 17 00:00:00 2001
From: Emil Jahshan <emil.jahshan@intel.com>
Date: Thu, 7 Oct 2021 15:05:05 +0300
Subject: [PATCH] calibration fix for d45x

Signed-off-by: Emil Jahshan <emil.jahshan@intel.com>
---
 drivers/media/i2c/d4xx.c | 20 +++++++++-----------
 1 file changed, 9 insertions(+), 11 deletions(-)

diff --git a/drivers/media/i2c/d4xx.c b/drivers/media/i2c/d4xx.c
index 443ea62f0..2105f44c2 100644
--- a/drivers/media/i2c/d4xx.c
+++ b/drivers/media/i2c/d4xx.c
@@ -515,7 +515,7 @@ static const struct ds5_resolution ds5_sizes[] = {
 };
 
 static const struct ds5_resolution ds5_rlt_rgb_sizes[] = {
-    {
+	{
 		.width = 1280,
 		.height = 800,
 		.framerates = ds5_framerate_to_30,
@@ -666,7 +666,7 @@ static const struct ds5_format ds5_y_formats_ds5u[] = {
 };
 
 static const struct ds5_format ds5_rlt_rgb_format = {
-    .data_type = 0x1e,	/* UYVY */
+	.data_type = 0x1e,	/* UYVY */
 	.mbus_code = MEDIA_BUS_FMT_YUYV8_1X16,
 	.n_resolutions = ARRAY_SIZE(ds5_rlt_rgb_sizes),
 	.resolutions = ds5_rlt_rgb_sizes,
@@ -1824,7 +1824,6 @@ static int ds5_ctrl_init(struct ds5 *state)
 	struct ds5_ctrls *ctrls = &state->ctrls;
 	struct v4l2_ctrl_handler *hdl = &ctrls->handler;
 	struct v4l2_subdev *sd = &state->mux.sd.subdev;
-	u8 max;
 	int ret;
 
 	ret = v4l2_ctrl_handler_init(hdl, DS5_N_CONTROLS);
@@ -1866,11 +1865,9 @@ static int ds5_ctrl_init(struct ds5 *state)
 					16, 248, 1, 16);
 
 	/* Assume both shutter and aperture priorities are supported */
-	max = /*sensor->exposure_priority ? V4L2_EXPOSURE_APERTURE_PRIORITY :*/
-		V4L2_EXPOSURE_MANUAL;
 	ctrls->auto_exp = v4l2_ctrl_new_std_menu(hdl, ops,
 						 V4L2_CID_EXPOSURE_AUTO,
-						 max, 0, 1);
+						 V4L2_EXPOSURE_MANUAL, 0, (u8)V4L2_CID_EXPOSURE_AUTO);
 
 	// TODO: this prevents setting of manual exposure
 	// v4l2_ctrl_auto_cluster(3, &ctrls->auto_exp, 0, false);
@@ -2600,7 +2597,7 @@ static int ds5_fixed_configuration(struct i2c_client *client, struct ds5 *state)
 	sensor = &state->depth.sensor;
 	switch (dev_type) {
 	case DS5_DEVICE_TYPE_D43X:
-	case DS5_DEVICE_TYPE_D45X: // TODO: add d45x formats struct
+	case DS5_DEVICE_TYPE_D45X:
 		sensor->formats = ds5_depth_formats_d43x;
 		break;
 	case DS5_DEVICE_TYPE_D46X:
@@ -2617,6 +2614,7 @@ static int ds5_fixed_configuration(struct i2c_client *client, struct ds5 *state)
 	sensor->n_formats = state->variant->n_formats;
 	sensor->mux_pad = DS5_MUX_PAD_MOTION_T;
 	switch (dev_type) {
+	case DS5_DEVICE_TYPE_D45X:
 	case DS5_DEVICE_TYPE_D43X: {
 		unsigned int *calib_resolutions_size = (unsigned int *)&(sensor->formats[ARRAY_SIZE(ds5_y_formats_ds5u)-1].n_resolutions);
 		const struct ds5_resolution** calib_resolutions = (const struct ds5_resolution**)
@@ -2639,9 +2637,9 @@ static int ds5_fixed_configuration(struct i2c_client *client, struct ds5 *state)
 	sensor = &state->rgb.sensor;
 	switch (dev_type) {
 	case DS5_DEVICE_TYPE_D43X:
-    case DS5_DEVICE_TYPE_D46X:
+	case DS5_DEVICE_TYPE_D46X:
 		sensor->formats = &ds5_onsemi_rgb_format;
-        sensor->n_formats = DS5_ONSEMI_RGB_N_FORMATS;
+		sensor->n_formats = DS5_ONSEMI_RGB_N_FORMATS;
 		break;
 	case DS5_DEVICE_TYPE_D45X:
 		sensor->formats = &ds5_rlt_rgb_format;
@@ -2649,9 +2647,9 @@ static int ds5_fixed_configuration(struct i2c_client *client, struct ds5 *state)
 		break;
 	default:
 		sensor->formats = &ds5_onsemi_rgb_format;
-        sensor->n_formats = DS5_ONSEMI_RGB_N_FORMATS;
+		sensor->n_formats = DS5_ONSEMI_RGB_N_FORMATS;
 	}
-    sensor->mux_pad = DS5_MUX_PAD_RGB;
+	sensor->mux_pad = DS5_MUX_PAD_RGB;
 
 	/*sensor->formats = &ds5_onsemi_rgb_format;
 	sensor->n_formats = DS5_RGB_N_FORMATS;
-- 
2.17.1

